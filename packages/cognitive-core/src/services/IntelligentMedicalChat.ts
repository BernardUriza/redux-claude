// ü¶Å Chat de Inferencia M√©dica Inteligente - Creado por Bernard Orozco
// Inspirado en MAI-DxO y la sabidur√≠a de Aslan para salvar al Doctor Edmund

import { callDecisionEngine, callIndividualDecision } from './decisionalMiddleware'
import type { MedicalMessage } from '../store/medicalChatSlice'
import type { AppDispatch } from '../store/store'
import {
  addDashboardMessage,
  addAssistantMessage,
  completeExtraction,
  setExtractionError,
  setDashboardLoading,
  setAssistantLoading,
} from '../store/medicalChatSlice'

export interface MedicalInference {
  id: string
  category: 'demographic' | 'symptom' | 'specialty' | 'urgency' | 'context'
  confidence: number
  inference: string
  evidence: string[]
  needs_confirmation: boolean
}

export interface IntelligentChatResponse {
  message: string
  inferences: MedicalInference[]
  suggested_actions: string[]
  confidence_level: 'low' | 'medium' | 'high'
  requires_user_input: boolean
  conversation_stage: 'initial' | 'gathering' | 'analyzing' | 'concluding'
  // üß¨ Metadata enriquecida desde extractor (arquitectura complementaria)
  extraction_metadata?: {
    completeness_percentage: number
    nom_compliant: boolean
    ready_for_soap: boolean
    extracted_data: any
  }
}

export interface ChatAnalysisRequest {
  user_input: string
  conversation_history: MedicalMessage[]
  previous_inferences?: MedicalInference[]
}

export class IntelligentMedicalChat {
  private dispatch: AppDispatch
  private coreType: 'dashboard' | 'assistant'

  constructor(dispatch: AppDispatch, coreType: 'dashboard' | 'assistant' = 'dashboard') {
    this.dispatch = dispatch
    this.coreType = coreType
  }

  /**
   * Procesa input del usuario usando Redux store - sin returns innecesarios
   * Toda la data va al store, no devuelve nada
   */
  async processUserInput(userInput: string): Promise<void> {
    try {
      this.dispatch(setDashboardLoading(true))

      if (!userInput || typeof userInput !== 'string') {
        console.warn('‚ö†Ô∏è Input inv√°lido en processUserInput:', userInput)
        this.dispatch(
          addDashboardMessage({
            content: 'ü¶Å Hola Doctor Edmund, ¬øpodr√≠a proporcionarme datos del paciente?',
            type: 'assistant',
          })
        )
        this.dispatch(setDashboardLoading(false))
        return
      }

      // üéØ ARQUITECTURA SECUENCIAL INTELIGENTE: Extractor ‚Üí Chat solo lo faltante
      console.log('üîÑ PASO 1: Ejecutando extractor para analizar datos disponibles...')

      // PASO 1: üß¨ Extractor analiza QU√â datos tenemos y cu√°les faltan (SIN CONTEXTO - funci√≥n pura)
      const extractorResponse = await callIndividualDecision('medical_data_extractor', userInput)

      if (!extractorResponse.success) {
        console.warn('üí• Extractor fall√≥, usando fallback b√°sico')
        this.dispatch(
          addAssistantMessage({
            content: 'ü¶Å Error temporal. ¬øPodr√≠a repetir su consulta m√©dica?',
            type: 'assistant',
          })
        )
        this.dispatch(setAssistantLoading(false))
        return
      }

      // üî• CRITICAL: Parse the extracted data correctly
      let extractedData = extractorResponse.decision
      
      console.log('üîç [RAW EXTRACTOR] Raw decision type:', typeof extractedData)
      console.log('üîç [RAW EXTRACTOR] Raw decision keys:', Object.keys(extractedData || {}))
      
      // If the decision has a 'content' field with JSON string, parse it
      if (extractedData && typeof extractedData === 'object' && extractedData.content) {
        console.log('üîç [CONTENT FIELD] Raw content length:', extractedData.content?.length)
        console.log('üîç [CONTENT FIELD] Content preview (first 200 chars):', extractedData.content?.substring(0, 200))
        console.log('üîç [CONTENT FIELD] Content preview (last 200 chars):', extractedData.content?.substring(-200))
        
        try {
          // BRUTAL JSON CLEANING: Remove any non-JSON content
          let cleanContent = extractedData.content.trim()
          
          // Find JSON boundaries - look for first { and last }
          const firstBrace = cleanContent.indexOf('{')
          const lastBrace = cleanContent.lastIndexOf('}')
          
          if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
            cleanContent = cleanContent.substring(firstBrace, lastBrace + 1)
            console.log('üîß [CLEANING] Extracted pure JSON boundaries')
            console.log('üîß [CLEANING] Clean content preview:', cleanContent.substring(0, 100) + '...')
          }
          
          extractedData = JSON.parse(cleanContent)
          console.log('üîß [PARSED] Successfully parsed JSON from content field')
        } catch (error) {
          console.error('üí• [PARSE ERROR] Could not parse JSON from content:', error)
          console.error('üí• [PARSE ERROR] Failed content:', extractedData.content?.substring(0, 500))
          // Keep original data as fallback
        }
      }
      
      const completenessPercentage =
        extractedData.extraction_metadata?.overall_completeness_percentage || 0
      const missingCriticalFields = extractedData.extraction_metadata?.missing_critical_fields || []
      const isNOMCompliant = extractedData.extraction_metadata?.nom_compliant || false

      console.log('üìä An√°lisis de completitud:', {
        completeness: completenessPercentage,
        missing_fields: missingCriticalFields,
        nom_compliant: isNOMCompliant,
      })

      // PASO 2: Guardar datos extra√≠dos en store
      console.log('üîç [INTELLIGENT CHAT] About to dispatch completeExtraction with:', {
        demographics: extractedData.demographics,
        chief_complaint: extractedData.clinical_presentation?.chief_complaint,
        primary_symptoms: extractedData.clinical_presentation?.primary_symptoms,
        age_raw: extractedData.demographics?.patient_age_years,
        gender_raw: extractedData.demographics?.patient_gender,
        full_object_keys: Object.keys(extractedData),
        is_object: typeof extractedData === 'object'
      })
      this.dispatch(completeExtraction(extractedData))

      // PASO 3: ü¶Å Doctor Edmund CON CONTINUIDAD - Usa el n√∫cleo especificado
      console.log(`üîÑ PASO 3: Doctor Edmund en n√∫cleo ${this.coreType.toUpperCase()}...`)

      // üß† CONTEXTO ENRIQUECIDO: Pasar datos extra√≠dos al chat
      const contextualInput = this.buildContextualPrompt(userInput, extractedData)

      const chatResponse = await callDecisionEngine(
        this.coreType,
        'intelligent_medical_chat',
        contextualInput,
        {
          persistContext: true,
          // Claude recibir√° el contexto autom√°ticamente del n√∫cleo especificado + datos extra√≠dos
        }
      )

      console.log(
        `üß† [CONTEXTO] N√∫cleo: ${this.coreType}, Input: "${userInput.substring(0, 50)}..."`
      )

      if (chatResponse.success) {
        // üõ°Ô∏è EXTRACCI√ìN BRUTAL DEL JSON ANIDADO
        const decision = chatResponse.decision as any
        let message: string = ''

        console.log('üîç DEBUG decision type:', typeof decision)
        console.log('üîç DEBUG decision sample:', JSON.stringify(decision).substring(0, 200) + '...')

        try {
          // El decision puede ser:
          // 1. Object con campo content: {content: "JSON_STRING", success: true}
          // 2. String JSON directo: "{"message": "...", ...}"
          // 3. Object ya parseado: {message: "...", ...}

          let jsonContent = ''

          if (typeof decision === 'object' && decision.content) {
            // Caso 1: Object con campo content
            jsonContent = decision.content
          } else if (typeof decision === 'string') {
            // Caso 2: String JSON directo
            jsonContent = decision
          } else if (typeof decision === 'object' && decision.message) {
            // Caso 3: Ya es el objeto final
            message = decision.message
            console.log('üéØ [DIRECT] Extracted message:', message)
          }

          // Si tenemos JSON string, parsearlo
          if (
            jsonContent &&
            typeof jsonContent === 'string' &&
            jsonContent.includes('"message":')
          ) {
            const parsed = JSON.parse(jsonContent)
            message = parsed.message || jsonContent
            console.log('üéØ [PARSED] Extracted message:', message)
          } else if (jsonContent && !message) {
            // Fallback: usar el contenido directo
            message = jsonContent
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Error parseando JSON anidado:', error)
          message = typeof decision === 'string' ? decision : JSON.stringify(decision)
        }

        // Fallback final
        if (!message || message.trim() === '') {
          message = await this.generateQuestionBasedOnMissingFields(
            missingCriticalFields,
            extractedData
          )
        }

        // Agregar respuesta del chat al store - N√öCLEO SEG√öN CONFIGURACI√ìN
        // NOTA: No duplicamos en store porque callDecisionEngine ya maneja contexto internamente
        const addMessage = this.coreType === 'assistant' ? addAssistantMessage : addDashboardMessage
        this.dispatch(
          addMessage({
            content: message,
            type: 'assistant',
            metadata: {
              sectionType: completenessPercentage >= 80 ? 'diagnosis' : 'education',
            },
          })
        )

        console.log(`‚úÖ Respuesta contextual guardada en n√∫cleo ${this.coreType.toUpperCase()}`)
      } else {
        // Fallback: Generar pregunta contextual con Claude (SIN CONTEXTO - funci√≥n pura)
        console.warn('‚ö†Ô∏è Chat fall√≥, generando pregunta contextual desde extractor')
        const contextualQuestion = await this.generateQuestionBasedOnMissingFields(
          missingCriticalFields,
          extractedData
        )
        const addMessage = this.coreType === 'assistant' ? addAssistantMessage : addDashboardMessage
        this.dispatch(
          addMessage({
            content: contextualQuestion,
            type: 'assistant',
          })
        )
      }
    } catch (error) {
      console.error('üí• Error en chat inteligente:', error)
      this.dispatch(
        setExtractionError(error instanceof Error ? error.message : 'Error desconocido')
      )
      const addMessage = this.coreType === 'assistant' ? addAssistantMessage : addDashboardMessage
      this.dispatch(
        addMessage({
          content: 'ü¶Å Error procesando consulta. ¬øPodr√≠a intentar de nuevo?',
          type: 'assistant',
        })
      )
    } finally {
      const setLoading = this.coreType === 'assistant' ? setAssistantLoading : setDashboardLoading
      this.dispatch(setLoading(false))
    }
  }

  /**
   * üß† Construye prompt contextual con datos extra√≠dos previamente
   */
  private buildContextualPrompt(userInput: string, extractedData: any): string {
    if (!extractedData) return userInput

    const context: string[] = []

    // Agregar datos demogr√°ficos conocidos
    if (
      extractedData.demographics?.patient_age_years &&
      extractedData.demographics.patient_age_years !== 'unknown'
    ) {
      context.push(`Edad: ${extractedData.demographics.patient_age_years} a√±os`)
    }
    if (
      extractedData.demographics?.patient_gender &&
      extractedData.demographics.patient_gender !== 'unknown'
    ) {
      context.push(`G√©nero: ${extractedData.demographics.patient_gender}`)
    }

    // Agregar s√≠ntomas conocidos
    if (
      extractedData.clinical_presentation?.chief_complaint &&
      extractedData.clinical_presentation.chief_complaint !== 'unknown'
    ) {
      context.push(`S√≠ntoma principal: ${extractedData.clinical_presentation.chief_complaint}`)
    }

    // Agregar intensidad si est√° disponible
    if (
      extractedData.symptom_characteristics?.pain_intensity_scale &&
      extractedData.symptom_characteristics.pain_intensity_scale !== null
    ) {
      context.push(
        `Intensidad del dolor: ${extractedData.symptom_characteristics.pain_intensity_scale}/10`
      )
    }

    if (context.length === 0) return userInput

    return `DATOS EXTRA√çDOS PREVIAMENTE: ${context.join(', ')}\n\nNUEVO INPUT DEL USUARIO: ${userInput}\n\n[Usa la informaci√≥n previa para hacer preguntas inteligentes sin repetir datos ya conocidos]`
  }

  /**
   * Genera pregunta inteligente usando Claude - combinable y contextual
   */
  private async generateQuestionBasedOnMissingFields(
    missingFields: string[],
    extractedData?: any
  ): Promise<string> {
    try {
      // üß† Contexto para Claude basado en datos ya extra√≠dos
      const context = this.buildContextForQuestion(extractedData, missingFields)

      // üß† Usar callIndividualDecision para generar preguntas (funci√≥n pura - 2+2=4)
      const claudeResponse = await callIndividualDecision(
        'intelligent_medical_chat',
        `Genera una pregunta m√©dica contextual para: ${missingFields.join(', ')}`,
        {
          action: 'generate_contextual_question',
          missing_fields: missingFields,
          extracted_context: context,
          persona: 'Doctor Edmund (Le√≥n de Narnia) - profesional pero c√°lido',
          instruction:
            'Genera UNA pregunta espec√≠fica y directa para obtener los datos m√©dicos faltantes m√°s cr√≠ticos. M√°ximo 25 palabras.',
          expected_response: 'Solo la pregunta, sin explicaciones adicionales',
        }
      )

      // Claude puede devolver la pregunta en varios formatos
      if (claudeResponse?.success && claudeResponse?.decision) {
        const decision = claudeResponse.decision as any
        return (
          decision.question ||
          decision.message ||
          decision.response ||
          decision.text_response ||
          JSON.stringify(decision)
        )
      }

      // Fallback inteligente si Claude falla
      return this.generateFallbackQuestion(missingFields)
    } catch (error) {
      console.warn('‚ö†Ô∏è Error generando pregunta con Claude, usando fallback:', error)
      return this.generateFallbackQuestion(missingFields)
    }
  }

  /**
   * Construye contexto m√©dico para la pregunta
   */
  private buildContextForQuestion(extractedData: any, missingFields: string[]): string {
    if (!extractedData) return 'Caso m√©dico inicial'

    const context: string[] = []

    // Datos ya identificados
    if (
      extractedData.demographics?.patient_age_years &&
      extractedData.demographics.patient_age_years !== 'unknown'
    ) {
      context.push(`Edad: ${extractedData.demographics.patient_age_years} a√±os`)
    }
    if (
      extractedData.demographics?.patient_gender &&
      extractedData.demographics.patient_gender !== 'unknown'
    ) {
      context.push(`G√©nero: ${extractedData.demographics.patient_gender}`)
    }
    if (
      extractedData.clinical_presentation?.chief_complaint &&
      extractedData.clinical_presentation.chief_complaint !== 'unknown'
    ) {
      context.push(`S√≠ntoma: ${extractedData.clinical_presentation.chief_complaint}`)
    }

    const contextStr =
      context.length > 0 ? `Datos confirmados: ${context.join(', ')}` : 'Caso inicial'
    return `${contextStr}. Faltan: ${missingFields.join(', ')}`
  }

  /**
   * Pregunta fallback r√°pida - no depende de Claude
   */
  private generateFallbackQuestion(missingFields: string[]): string {
    if (missingFields.includes('patient_age_years') && missingFields.includes('patient_gender')) {
      return 'ü¶Å Doctor Edmund, para continuar necesito la edad y g√©nero del paciente.'
    }

    if (missingFields.includes('patient_age_years')) {
      return 'ü¶Å Doctor Edmund, ¬øqu√© edad tiene el paciente?'
    }

    if (missingFields.includes('patient_gender')) {
      return 'ü¶Å Doctor Edmund, ¬øcu√°l es el g√©nero del paciente?'
    }

    if (missingFields.includes('chief_complaint')) {
      return 'ü¶Å Doctor Edmund, ¬øcu√°l es el s√≠ntoma principal que presenta el paciente?'
    }

    return 'ü¶Å Doctor Edmund, ¬øpodr√≠a proporcionarme m√°s detalles del caso m√©dico?'
  }
}
