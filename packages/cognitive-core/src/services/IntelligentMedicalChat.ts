// ü¶Å Chat de Inferencia M√©dica Inteligente - Creado por Bernard Orozco
// Inspirado en MAI-DxO y la sabidur√≠a de Aslan para salvar al Doctor Edmund

import { callClaudeForDecision } from './decisionalMiddleware'
import type { MedicalMessage } from '../store/medicalChatSlice'

export interface MedicalInference {
  id: string
  category: 'demographic' | 'symptom' | 'specialty' | 'urgency' | 'context'
  confidence: number
  inference: string
  evidence: string[]
  needs_confirmation: boolean
}

export interface IntelligentChatResponse {
  message: string
  inferences: MedicalInference[]
  suggested_actions: string[]
  confidence_level: 'low' | 'medium' | 'high'
  requires_user_input: boolean
  conversation_stage: 'initial' | 'gathering' | 'analyzing' | 'concluding'
}

export interface ChatAnalysisRequest {
  user_input: string
  conversation_history: MedicalMessage[]
  previous_inferences?: MedicalInference[]
}

export class IntelligentMedicalChat {
  /**
   * Procesa input del usuario con inferencia inteligente tipo MAI-DxO
   * Nunca rechaza - siempre ayuda con lo que tiene
   */
  async processUserInput(request: ChatAnalysisRequest): Promise<IntelligentChatResponse> {
    try {
      // Detectar patrones m√©dicos autom√°ticamente
      const medicalContext = this.extractMedicalContext(request.user_input)

      // Usar DecisionalMiddleware para inferencia inteligente
      const response = await callClaudeForDecision(
        'intelligent_medical_chat',
        this.buildInferentialPrompt(request, medicalContext),
        'claude',
        undefined,
        undefined,
        {
          conversation_history: request.conversation_history,
          previous_inferences: request.previous_inferences,
          medical_context: medicalContext,
        }
      )

      if (!response.success) {
        // Fallback: Nunca fallar completamente
        return this.createFallbackResponse(request.user_input, medicalContext)
      }

      return response.decision as IntelligentChatResponse
    } catch (error) {
      console.error('Error en chat inteligente:', error)
      return this.createFallbackResponse(request.user_input)
    }
  }

  /**
   * Extrae contexto m√©dico b√°sico sin validaci√≥n estricta
   */
  private extractMedicalContext(input: string): any {
    const context: any = {
      has_symptoms: false,
      has_demographics: false,
      has_timeline: false,
      has_medical_terms: false,
      urgency_indicators: [],
      specialty_indicators: [],
    }

    const cleanInput = input.toLowerCase()

    // Detectar s√≠ntomas (no exigir formato perfecto)
    const symptomPatterns = [
      /dolor|molestia|ache|pain/i,
      /fiebre|fever|calentura/i,
      /n√°usea|v√≥mito|nausea/i,
      /mareo|dizzy|vertigo/i,
      /cansancio|fatiga|tired/i,
    ]
    context.has_symptoms = symptomPatterns.some(pattern => pattern.test(cleanInput))

    // Detectar demograf√≠a (inferir si no est√° expl√≠cita)
    context.has_demographics =
      /\d+\s*(a√±os?|year|age)|masculino|femenino|male|female|hombre|mujer/i.test(cleanInput)

    // Detectar timeline
    context.has_timeline = /desde|hace|during|for|yesterday|hoy|ayer|semana|week/i.test(cleanInput)

    // Detectar t√©rminos m√©dicos
    context.has_medical_terms =
      /paciente|patient|s√≠ntoma|symptom|diagn√≥stico|diagnosis|medicamento|medication/i.test(
        cleanInput
      )

    // Detectar urgencia
    if (
      /severo|severe|intenso|intense|insoportable|unbearable|emergencia|emergency/i.test(cleanInput)
    ) {
      context.urgency_indicators.push('high_intensity')
    }
    if (/pecho|chest|coraz√≥n|heart|respirar|breathe/i.test(cleanInput)) {
      context.urgency_indicators.push('cardiovascular')
    }

    // Detectar especialidad probable
    if (/pecho|coraz√≥n|presi√≥n|chest|heart|pressure/i.test(cleanInput)) {
      context.specialty_indicators.push('cardiology')
    }
    if (/cabeza|dolor de cabeza|migraine|headache/i.test(cleanInput)) {
      context.specialty_indicators.push('neurology')
    }
    if (/est√≥mago|abdominal|digestive|gastro/i.test(cleanInput)) {
      context.specialty_indicators.push('gastroenterology')
    }

    return context
  }

  /**
   * Construye prompt para inferencia inteligente estilo MAI-DxO
   */
  private buildInferentialPrompt(request: ChatAnalysisRequest, medicalContext: any): string {
    const hasHistory = request.conversation_history && request.conversation_history.length > 0
    const historyContext = hasHistory
      ? `\n\nCONTEXTO DE CONVERSACI√ìN PREVIA:\n${request.conversation_history
          .slice(-3)
          .map(msg => `${msg.type}: ${msg.content}`)
          .join('\n')}`
      : ''

    return `Eres un ANIMAL PARLANTE M√âDICO INTELIGENTE que NUNCA rechaza pacientes por datos incompletos.

FILOSOF√çA: Como MAI-DxO de Microsoft, tu trabajo es INFERIR inteligentemente y AYUDAR inmediatamente, no pedir m√°s datos.

INPUT DEL USUARIO: "${request.user_input}"
${historyContext}

CONTEXTO DETECTADO AUTOM√ÅTICAMENTE:
- S√≠ntomas detectados: ${medicalContext.has_symptoms}
- Demograf√≠a presente: ${medicalContext.has_demographics}  
- Timeline presente: ${medicalContext.has_timeline}
- Indicadores de urgencia: ${medicalContext.urgency_indicators.join(', ') || 'ninguno'}
- Especialidad sugerida: ${medicalContext.specialty_indicators.join(', ') || 'medicina general'}

TU MISI√ìN:
1. SALUDA al "Doctor Edmund" de forma c√°lida y profesional
2. RECONOCE lo que mencion√≥ sin juzgar la completitud
3. INFIERE inteligentemente lo que m√°s probablemente est√° ocurriendo
4. PROPORCIONA valor inmediato con tus inferencias
5. PREGUNTA confirmaci√≥n simple (S√ç/NO) sobre tus inferencias
6. OFRECE pr√≥ximos pasos √∫tiles

FORMATO DE RESPUESTA OBLIGATORIO:
{
  "message": "ü¶Å Hola Doctor Edmund, [reconocimiento + inferencias + pregunta de confirmaci√≥n]",
  "inferences": [
    {
      "id": "demographic_inference",
      "category": "demographic",
      "confidence": 0.75,
      "inference": "Paciente masculino adulto (35-55 a√±os aproximadamente)",
      "evidence": ["patr√≥n de s√≠ntomas", "contexto de presentaci√≥n"],
      "needs_confirmation": true
    }
  ],
  "suggested_actions": ["Protocolo cardiovascular b√°sico", "Evaluaci√≥n de riesgo"],
  "confidence_level": "medium",
  "requires_user_input": true,
  "conversation_stage": "gathering"
}

REGLAS INQUEBRANTABLES:
- NUNCA digas "datos insuficientes" o "complete m√°s informaci√≥n"
- SIEMPRE haz inferencias inteligentes basadas en patrones m√©dicos
- SIEMPRE proporciona valor inmediato
- SIEMPRE pide confirmaci√≥n simple de tus inferencias
- NUNCA hagas m√°s de 3 inferencias por respuesta

RESPONDE SOLO CON EL JSON, SIN TEXTO ADICIONAL.`
  }

  /**
   * Crea respuesta de fallback que nunca falla
   */
  private createFallbackResponse(userInput: string, medicalContext?: any): IntelligentChatResponse {
    const hasSymptoms = medicalContext?.has_symptoms || /dolor|molestia|s√≠ntoma/i.test(userInput)
    const baseMessage = hasSymptoms
      ? 'ü¶Å Hola Doctor Edmund, veo que mencionas s√≠ntomas m√©dicos. Aunque mi sistema tuvo un peque√±o problema, puedo ayudarte bas√°ndome en patrones comunes.'
      : 'ü¶Å Hola Doctor Edmund, entiendo que tienes una consulta m√©dica. D√©jame ayudarte con lo que puedo inferir.'

    return {
      message: `${baseMessage} ¬øPodr√≠as confirmar si mis inferencias b√°sicas van por buen camino?`,
      inferences: [
        {
          id: 'basic_medical_context',
          category: 'context',
          confidence: 0.6,
          inference: hasSymptoms
            ? 'Consulta m√©dica con s√≠ntomas reportados'
            : 'Consulta m√©dica general',
          evidence: ['patr√≥n de entrada detectado'],
          needs_confirmation: true,
        },
      ],
      suggested_actions: ['Proporcionar m√°s detalles espec√≠ficos', 'Confirmar contexto inicial'],
      confidence_level: 'low',
      requires_user_input: true,
      conversation_stage: 'initial',
    }
  }
}
