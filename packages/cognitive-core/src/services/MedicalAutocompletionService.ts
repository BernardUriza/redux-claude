// ü§ñ Servicio de Autocompletado M√©dico Inteligente
// Creado por Bernard Orozco

import { ClaudeAdapter } from '../decision-engine/providers/claude'

export interface AutocompletionSuggestion {
  id: string
  title: string
  description: string
  template: string
  confidence: number
  category: 'basic' | 'detailed' | 'specialized'
}

export interface AutocompletionRequest {
  partialInput: string
  medicalSpecialty?: string
  patientContext?: {
    age?: number
    gender?: string
    previousSymptoms?: string[]
  }
}

export interface AutocompletionResult {
  success: boolean
  suggestions: AutocompletionSuggestion[]
  enhancedTemplate: string
  error?: string
}

export class MedicalAutocompletionService {
  private claudeAdapter: ClaudeAdapter

  constructor() {
    this.claudeAdapter = new ClaudeAdapter()
  }

  async generateCompletionSuggestions(request: AutocompletionRequest): Promise<AutocompletionResult> {
    try {
      const completionPrompt = this.buildCompletionPrompt(request)
      
      const response = await this.claudeAdapter.makeRequest(
        'Eres un asistente m√©dico especializado en estructurar consultas cl√≠nicas seg√∫n est√°ndares profesionales.',
        completionPrompt
      )

      if (!response.success) {
        return {
          success: false,
          suggestions: [],
          enhancedTemplate: '',
          error: response.error || 'Error generando autocompletado'
        }
      }

      return this.parseCompletionResponse(response.content, request.partialInput)
    } catch (error) {
      console.error('Error en autocompletado m√©dico:', error)
      return {
        success: false,
        suggestions: [],
        enhancedTemplate: '',
        error: error instanceof Error ? error.message : 'Error desconocido'
      }
    }
  }

  private buildCompletionPrompt(request: AutocompletionRequest): string {
    return `Como asistente m√©dico especializado, ayuda a completar esta consulta m√©dica con informaci√≥n cl√≠nica relevante.

**ENTRADA DEL M√âDICO:**
"${request.partialInput}"

**CONTEXTO ADICIONAL:**
- Especialidad: ${request.medicalSpecialty || 'Medicina General'}
- Edad paciente: ${request.patientContext?.age || 'No especificada'}
- G√©nero: ${request.patientContext?.gender || 'No especificado'}
- S√≠ntomas previos: ${request.patientContext?.previousSymptoms?.join(', ') || 'Ninguno registrado'}

**TAREA:**
Genera exactamente 3 opciones de autocompletado m√©dico estructurado, cada una con diferente nivel de detalle.

**FORMATO DE RESPUESTA (JSON):**
\`\`\`json
{
  "suggestions": [
    {
      "id": "basic",
      "title": "Consulta B√°sica",
      "description": "Estructura m√≠nima requerida",
      "template": "Paciente [g√©nero] de [edad] a√±os presenta [s√≠ntoma principal] desde hace [tiempo]. [Caracter√≠sticas del s√≠ntoma]. Antecedentes: [antecedentes]. Medicamentos: [medicamentos actuales].",
      "confidence": 0.85,
      "category": "basic"
    },
    {
      "id": "detailed", 
      "title": "Consulta Detallada",
      "description": "Incluye exploraci√≥n f√≠sica inferida",
      "template": "Paciente [g√©nero] de [edad] a√±os consulta por [motivo principal] de [tiempo de evoluci√≥n]. SUBJETIVO: [s√≠ntomas detallados], [factores agravantes/atenuantes]. OBJETIVO: Signos vitales [TA/FC/FR/T¬∞], exploraci√≥n [hallazgos f√≠sicos]. Antecedentes: [antecedentes relevantes]. Medicaci√≥n actual: [f√°rmacos].",
      "confidence": 0.90,
      "category": "detailed"
    },
    {
      "id": "specialized",
      "title": "Consulta Especializada", 
      "description": "Formato completo SOAP con diferenciales",
      "template": "CASO CL√çNICO: Paciente [g√©nero], [edad] a√±os, [ocupaci√≥n], consulta por [s√≠ntoma principal] de [tiempo de evoluci√≥n]. SUBJETIVO: [historia cl√≠nica detallada], [revisi√≥n por sistemas]. OBJETIVO: [signos vitales], [exploraci√≥n f√≠sica sistem√°tica]. AN√ÅLISIS: Diagn√≥stico diferencial incluye [dx1], [dx2], [dx3]. PLAN: [estudios complementarios], [tratamiento inicial], [seguimiento].",
      "confidence": 0.95,
      "category": "specialized"
    }
  ],
  "enhancedTemplate": "Paciente [g√©nero] de [edad] a√±os presenta [s√≠ntoma principal espec√≠fico basado en entrada] desde hace [tiempo]. [Inferencias cl√≠nicas relevantes]. Requiere evaluaci√≥n de [sistemas relacionados]. Antecedentes: [antecedentes sugeridos]. Plan: [estudios iniciales recomendados]."
}
\`\`\`

**INSTRUCCIONES ESPEC√çFICAS:**
1. Usa corchetes [ ] para campos editables
2. Infiere informaci√≥n m√©dica relevante del texto parcial
3. Mant√©n terminolog√≠a m√©dica profesional
4. Progresi√≥n de complejidad: b√°sico ‚Üí detallado ‚Üí especializado
5. Confidence basado en completitud de la informaci√≥n original
6. NO inventar datos espec√≠ficos del paciente

**ESPECIALIDADES COMUNES:**
- C√≥licos ‚Üí Gastroenterolog√≠a, Ginecolog√≠a
- Cefalea ‚Üí Neurolog√≠a, Medicina Interna  
- Dolor tor√°cico ‚Üí Cardiolog√≠a, Medicina Emergencia
- Lesiones cut√°neas ‚Üí Dermatolog√≠a

Responde SOLO con el JSON v√°lido, sin texto adicional.`
  }

  private parseCompletionResponse(response: string, originalInput: string): AutocompletionResult {
    try {
      // Extraer JSON de la respuesta
      const jsonMatch = response.match(/```json\n?(.*?)\n?```/s)
      if (!jsonMatch) {
        throw new Error('Formato de respuesta inv√°lido')
      }

      const parsed = JSON.parse(jsonMatch[1])
      
      // Validar estructura
      if (!parsed.suggestions || !Array.isArray(parsed.suggestions) || parsed.suggestions.length !== 3) {
        throw new Error('Estructura de sugerencias inv√°lida')
      }

      return {
        success: true,
        suggestions: parsed.suggestions.map((suggestion: any, index: number) => ({
          id: suggestion.id || `suggestion_${index}`,
          title: suggestion.title || `Opci√≥n ${index + 1}`,
          description: suggestion.description || '',
          template: suggestion.template || '',
          confidence: suggestion.confidence || 0.5,
          category: suggestion.category || 'basic'
        })),
        enhancedTemplate: parsed.enhancedTemplate || '',
        error: undefined
      }
    } catch (error) {
      console.error('Error parseando respuesta de autocompletado:', error)
      
      // Fallback con templates predefinidos
      return this.getFallbackSuggestions(originalInput)
    }
  }

  private getFallbackSuggestions(originalInput: string): AutocompletionResult {
    const fallbackSuggestions: AutocompletionSuggestion[] = [
      {
        id: 'basic_fallback',
        title: 'Consulta B√°sica',
        description: 'Estructura m√≠nima requerida',
        template: `Paciente [g√©nero] de [edad] a√±os presenta ${this.extractMainSymptom(originalInput)} desde hace [tiempo]. [Caracter√≠sticas del s√≠ntoma]. Antecedentes: [antecedentes relevantes]. Medicamentos actuales: [medicamentos].`,
        confidence: 0.7,
        category: 'basic'
      },
      {
        id: 'detailed_fallback',
        title: 'Consulta Detallada', 
        description: 'Con exploraci√≥n f√≠sica',
        template: `Paciente [g√©nero] de [edad] a√±os consulta por ${this.extractMainSymptom(originalInput)} de [tiempo de evoluci√≥n]. SUBJETIVO: [descripci√≥n detallada del s√≠ntoma], [factores asociados]. OBJETIVO: Signos vitales [TA/FC/FR/T¬∞], [hallazgos en exploraci√≥n]. Antecedentes: [antecedentes]. Medicaci√≥n: [f√°rmacos actuales].`,
        confidence: 0.75,
        category: 'detailed'
      },
      {
        id: 'specialized_fallback',
        title: 'Consulta Especializada',
        description: 'Formato SOAP completo',
        template: `CASO CL√çNICO: Paciente [g√©nero], [edad] a√±os, presenta ${this.extractMainSymptom(originalInput)} de [tiempo de evoluci√≥n]. SUBJETIVO: [historia detallada]. OBJETIVO: [signos vitales y exploraci√≥n]. AN√ÅLISIS: [diagn√≥sticos diferenciales]. PLAN: [estudios y tratamiento].`,
        confidence: 0.8,
        category: 'specialized'
      }
    ]

    return {
      success: true,
      suggestions: fallbackSuggestions,
      enhancedTemplate: fallbackSuggestions[1].template,
      error: undefined
    }
  }

  private extractMainSymptom(input: string): string {
    const lowerInput = input.toLowerCase()
    
    // Buscar s√≠ntomas comunes
    const commonSymptoms = [
      { pattern: /colico|dolor abdominal/i, symptom: 'c√≥licos abdominales' },
      { pattern: /cefalea|dolor de cabeza/i, symptom: 'cefalea' },
      { pattern: /dolor toracico|dolor pecho/i, symptom: 'dolor tor√°cico' },
      { pattern: /fiebre|temperatura/i, symptom: 's√≠ndrome febril' },
      { pattern: /tos|expectoracion/i, symptom: 's√≠ntomas respiratorios' },
      { pattern: /diarrea|evacuaciones/i, symptom: 's√≠ntomas gastrointestinales' }
    ]

    for (const symptom of commonSymptoms) {
      if (symptom.pattern.test(input)) {
        return symptom.symptom
      }
    }

    // Extraer primera frase como s√≠ntoma
    const words = input.split(' ').slice(0, 3).join(' ')
    return `[${words}...]`
  }
}