// packages/cognitive-core/src/validators/DefensiveMedicineValidator.ts
// Sistema de Medicina Defensiva AI - Creado por Bernard Orozco

export interface UrgentPattern {
  symptoms: string[]
  criticalDifferentials: string[]
  redFlags: string[]
  timeToAction: 'immediate' | 'urgent' | 'priority' | 'routine'
  gravityScore: number
}

export interface DefensiveDiagnosis {
  diagnosis: string
  gravityScore: number // 1-10 (10 = life threatening)
  probabilityScore: number // 0-1 (probability based on symptoms)
  defensiveScore: number // Combined weighted score
  urgencyLevel: 'critical' | 'high' | 'medium' | 'low'
  actionRequired: string[]
  redFlags: string[]
  timeToTreatment?: string
}

export class DefensiveMedicineValidator {
  private urgentPatterns: Map<string, UrgentPattern> = new Map([
    ['dolor_toracico', {
      symptoms: ['dolor tor√°cico', 'dolor pecho', 'opresi√≥n tor√°cica', 'angina'],
      criticalDifferentials: [
        'Infarto Agudo del Miocardio',
        'Embolia Pulmonar',
        'Disecci√≥n A√≥rtica',
        'Neumot√≥rax a tensi√≥n',
        'Taponamiento card√≠aco'
      ],
      redFlags: ['dolor irradiado a brazo izquierdo', 'disnea s√∫bita', 's√≠ncope', 'diaforesis', 'n√°usea'],
      timeToAction: 'immediate',
      gravityScore: 10
    }],
    
    ['cefalea_severa', {
      symptoms: ['cefalea intensa', 'dolor cabeza severo', 'cefalea s√∫bita'],
      criticalDifferentials: [
        'Hemorragia Subaracnoidea',
        'Meningitis',
        'Hipertensi√≥n Intracraneal',
        'Arteritis Temporal',
        'Hipertensi√≥n Maligna'
      ],
      redFlags: ['rigidez nucal', 'fotofobia', 'alteraci√≥n conciencia', 'fiebre', 'petequias'],
      timeToAction: 'immediate',
      gravityScore: 9
    }],
    
    ['dolor_abdominal', {
      symptoms: ['dolor abdominal', 'dolor est√≥mago', 'dolor vientre'],
      criticalDifferentials: [
        'Apendicitis',
        'Obstrucci√≥n Intestinal',
        'Isquemia Mesent√©rica',
        'Perforaci√≥n Visceral',
        'Embarazo Ect√≥pico',
        'Aneurisma A√≥rtico Roto'
      ],
      redFlags: ['dolor migratorio', 'v√≥mito bilioso', 'ausencia ruidos intestinales', 'rigidez abdominal', 'hipotensi√≥n'],
      timeToAction: 'urgent',
      gravityScore: 8
    }],
    
    ['dificultad_respiratoria', {
      symptoms: ['disnea', 'dificultad respirar', 'ahogo', 'falta aire'],
      criticalDifferentials: [
        'Edema Agudo de Pulm√≥n',
        'Embolia Pulmonar',
        'Neumot√≥rax',
        'Asma Severo',
        'EPOC Exacerbado'
      ],
      redFlags: ['cianosis', 'uso m√∫sculos accesorios', 'orthopnea', 'hemoptisis', 'dolor tor√°cico'],
      timeToAction: 'immediate',
      gravityScore: 9
    }],
    
    ['alteracion_conciencia', {
      symptoms: ['confusi√≥n', 'somnolencia', 'alteraci√≥n mental', 'desorientaci√≥n'],
      criticalDifferentials: [
        'Accidente Cerebrovascular',
        'Hipoglucemia Severa',
        'Intoxicaci√≥n',
        'Encefalopat√≠a',
        'Convulsiones'
      ],
      redFlags: ['Glasgow < 13', 'd√©ficit neurol√≥gico focal', 'pupilas asim√©tricas', 'hipotermia', 'bradicardia'],
      timeToAction: 'immediate',
      gravityScore: 9
    }],
    
    ['fiebre_alta', {
      symptoms: ['fiebre > 38.5¬∞C', 'hipertermia', 'escalofr√≠os'],
      criticalDifferentials: [
        'Sepsis',
        'Meningitis',
        'Endocarditis',
        'Pielonefritis',
        'Neumon√≠a Severa'
      ],
      redFlags: ['hipotensi√≥n', 'taquicardia', 'alteraci√≥n mental', 'petequias', 'rigidez nucal'],
      timeToAction: 'urgent',
      gravityScore: 8
    }]
  ])

  /**
   * Clasifica diagn√≥sticos aplicando principios de medicina defensiva
   * Prioriza gravedad (70%) sobre probabilidad (30%)
   */
  prioritizeByGravity(differentials: any[]): DefensiveDiagnosis[] {
    return differentials.map(diff => {
      const defensiveDx = this.createDefensiveDiagnosis(diff)
      return defensiveDx
    }).sort((a, b) => b.defensiveScore - a.defensiveScore)
  }

  /**
   * Identifica patrones de urgencia en el input del paciente
   */
  identifyUrgentPatterns(input: string): UrgentPattern[] {
    const inputLower = input.toLowerCase()
    const identifiedPatterns: UrgentPattern[] = []

    this.urgentPatterns.forEach((pattern, key) => {
      const hasSymptoms = pattern.symptoms.some(symptom => 
        inputLower.includes(symptom.toLowerCase())
      )
      
      const hasRedFlags = pattern.redFlags.some(flag => 
        inputLower.includes(flag.toLowerCase())
      )

      if (hasSymptoms || hasRedFlags) {
        identifiedPatterns.push(pattern)
      }
    })

    return identifiedPatterns
  }

  /**
   * Calcula el nivel de urgencia general del caso
   */
  calculateOverallUrgency(patterns: UrgentPattern[]): {
    level: 'critical' | 'high' | 'medium' | 'low'
    maxGravity: number
    immediateActions: string[]
  } {
    if (patterns.length === 0) {
      return { level: 'low', maxGravity: 1, immediateActions: [] }
    }

    const maxGravity = Math.max(...patterns.map(p => p.gravityScore))
    const immediatePatterns = patterns.filter(p => p.timeToAction === 'immediate')
    
    let level: 'critical' | 'high' | 'medium' | 'low'
    if (maxGravity >= 9 || immediatePatterns.length > 0) {
      level = 'critical'
    } else if (maxGravity >= 7) {
      level = 'high'
    } else if (maxGravity >= 5) {
      level = 'medium'
    } else {
      level = 'low'
    }

    const immediateActions = this.generateImmediateActions(patterns, level)

    return { level, maxGravity, immediateActions }
  }

  private createDefensiveDiagnosis(differential: any): DefensiveDiagnosis {
    const gravityScore = this.assessGravityScore(differential.diagnosis || differential.name || '')
    const probabilityScore = differential.confidence || differential.probability || 0.5
    
    // Formula medicina defensiva: Gravedad 70% + Probabilidad 30%
    const defensiveScore = (gravityScore * 0.7) + (probabilityScore * 0.3)
    
    const urgencyLevel = this.mapGravityToUrgency(gravityScore)
    const actionRequired = this.generateActionPlan(gravityScore, differential.diagnosis || differential.name)
    const redFlags = this.identifyRedFlags(differential.diagnosis || differential.name)

    return {
      diagnosis: differential.diagnosis || differential.name || 'Diagn√≥stico no especificado',
      gravityScore,
      probabilityScore,
      defensiveScore,
      urgencyLevel,
      actionRequired,
      redFlags,
      timeToTreatment: this.estimateTimeToTreatment(gravityScore)
    }
  }

  private assessGravityScore(diagnosis: string): number {
    const diagnosisLower = diagnosis.toLowerCase()
    
    // Patolog√≠as cr√≠ticas (9-10)
    if (diagnosisLower.includes('infarto') || diagnosisLower.includes('embolia') || 
        diagnosisLower.includes('disecci√≥n') || diagnosisLower.includes('hemorragia') ||
        diagnosisLower.includes('meningitis') || diagnosisLower.includes('sepsis')) {
      return 10
    }
    
    // Patolog√≠as severas (7-8)
    if (diagnosisLower.includes('neumon√≠a') || diagnosisLower.includes('apendicitis') ||
        diagnosisLower.includes('obstrucci√≥n') || diagnosisLower.includes('isquemia')) {
      return 8
    }
    
    // Patolog√≠as moderadas (4-6)
    if (diagnosisLower.includes('gastritis') || diagnosisLower.includes('migra√±a') ||
        diagnosisLower.includes('infecci√≥n urinaria') || diagnosisLower.includes('bronquitis')) {
      return 5
    }
    
    // Por defecto: gravedad media
    return 6
  }

  private mapGravityToUrgency(gravityScore: number): 'critical' | 'high' | 'medium' | 'low' {
    if (gravityScore >= 9) return 'critical'
    if (gravityScore >= 7) return 'high'
    if (gravityScore >= 5) return 'medium'
    return 'low'
  }

  private generateActionPlan(gravityScore: number, diagnosis: string): string[] {
    const actions: string[] = []
    
    if (gravityScore >= 9) {
      actions.push('üö® ACTIVAR PROTOCOLO DE EMERGENCIA')
      actions.push('üìû Contactar servicios de emergencia inmediatamente')
      actions.push('üíâ Acceso IV + monitoreo vital continuo')
    }
    
    if (gravityScore >= 7) {
      actions.push('üè• Referir a urgencias hospitalarias')
      actions.push('üìã Estudios complementarios STAT')
      actions.push('üë®‚Äç‚öïÔ∏è Interconsulta especializada urgente')
    }
    
    if (gravityScore >= 5) {
      actions.push('üìÖ Control m√©dico en 24-48 horas')
      actions.push('üî¨ Laboratorios y estudios dirigidos')
      actions.push('üíä Tratamiento sintom√°tico inmediato')
    }
    
    actions.push('üìö Educaci√≥n al paciente sobre signos de alarma')
    
    return actions
  }

  private identifyRedFlags(diagnosis: string): string[] {
    const diagnosisLower = diagnosis.toLowerCase()
    const redFlags: string[] = []
    
    if (diagnosisLower.includes('infarto')) {
      redFlags.push('Dolor irradiado a brazo izquierdo/mand√≠bula')
      redFlags.push('Disnea s√∫bita o progresiva')
      redFlags.push('Diaforesis profusa')
      redFlags.push('N√°usea/v√≥mito asociado')
    }
    
    if (diagnosisLower.includes('hemorragia')) {
      redFlags.push('Cefalea s√∫bita "peor de mi vida"')
      redFlags.push('Alteraci√≥n del estado de conciencia')
      redFlags.push('Rigidez nucal')
      redFlags.push('D√©ficit neurol√≥gico focal')
    }
    
    return redFlags
  }

  private estimateTimeToTreatment(gravityScore: number): string {
    if (gravityScore >= 9) return 'Inmediato (< 15 min)'
    if (gravityScore >= 7) return 'Urgente (< 1 hora)'
    if (gravityScore >= 5) return 'Prioritario (< 4 horas)'
    return 'Rutinario (< 24 horas)'
  }

  private generateImmediateActions(patterns: UrgentPattern[], urgencyLevel: string): string[] {
    const actions: string[] = []
    
    if (urgencyLevel === 'critical') {
      actions.push('üö® ACTIVAR C√ìDIGO ROJO')
      actions.push('üìû Llamar ambulancia/911 AHORA')
      actions.push('üíä NO administrar medicamentos orales')
      actions.push('ü´Å Mantener v√≠a a√©rea permeable')
    }
    
    if (patterns.some(p => p.symptoms.includes('dolor tor√°cico'))) {
      actions.push('üíä Considerar aspirina 300mg (si no contraindicado)')
      actions.push('üìã ECG de 12 derivaciones STAT')
      actions.push('ü©∫ Monitoreo card√≠aco continuo')
    }
    
    return actions
  }

  /**
   * Genera prompt de medicina defensiva para Claude
   */
  generateDefensivePrompt(urgentPatterns: UrgentPattern[], overallUrgency: any): string {
    const patternsText = urgentPatterns.map(p => 
      `- ${p.criticalDifferentials.join(', ')}`
    ).join('\n')

    return `
üö® MEDICINA DEFENSIVA ACTIVADA - Nivel: ${overallUrgency.level.toUpperCase()}

INSTRUCCIONES CR√çTICAS:
1. DESCARTAR PRIMERO patolog√≠as de alta gravedad antes que alta probabilidad
2. Priorizar diagn√≥sticos con GravityScore ‚â• 8
3. Aplicar regla "No harm principle" - mejor sobrediagnosticar que subdiagnosticar

PATRONES URGENTES IDENTIFICADOS:
${patternsText}

ACCIONES INMEDIATAS REQUERIDAS:
${overallUrgency.immediateActions.map((action: string) => `‚Ä¢ ${action}`).join('\n')}

En tu an√°lisis SOAP, DEBES:
- Colocar diagn√≥sticos de alta gravedad al inicio de diferenciales
- Explicar por qu√© se descartan patolog√≠as cr√≠ticas
- Incluir tiempo estimado para intervenci√≥n
- Especificar signos de alarma para seguimiento
`
  }
}