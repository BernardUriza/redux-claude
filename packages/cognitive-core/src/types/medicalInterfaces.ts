// üé≠ INTERFACES M√âDICAS MULTIN√öCLEO - Creado por Bernard Orozco + Gandalf el Blanco
// Contratos sagrados para la migraci√≥n MOCK ‚Üí REAL

// === SOAP ANALYSIS INTERFACE ===
export interface SOAPAnalysis {
  // === SECCIONES SOAP M√âDICAS ===
  subjective: string | null          // S√≠ntomas reportados por paciente
  objective: string | null           // Observaciones m√©dicas objetivas  
  assessment: string | null          // Evaluaci√≥n diagn√≥stica
  plan: string | null               // Plan de tratamiento/seguimiento
  
  // === METADATOS DEL AN√ÅLISIS ===
  confidence: number                 // Confianza diagn√≥stica real (0-1)
  lastUpdated: number               // Timestamp √∫ltima actualizaci√≥n
  sessionId: string                 // ID de sesi√≥n del paciente
  
  // === ESTADO DEL AN√ÅLISIS ===
  isComplete: boolean               // ¬øAn√°lisis SOAP completo?
  completionPercentage: number      // % de completitud (0-100)
  
  // === INFORMACI√ìN CONTEXTUAL ===
  totalMessages: number             // Mensajes procesados para an√°lisis
  qualityScore: number              // Score de calidad de datos (0-1)
  extractionMethod: 'automatic' | 'manual' | 'hybrid' // M√©todo extracci√≥n
}

// === SYSTEM METRICS INTERFACE ===
export interface SystemMetrics {
  // === M√âTRICAS M√âDICAS PRINCIPALES ===
  confidence: number                // Confianza promedio del sistema (0-100)
  cycles: number                   // Ciclos diagn√≥sticos completados
  agentsActive: number             // Cores multin√∫cleo activos
  processingTime: number           // Tiempo respuesta promedio (ms)
  
  // === M√âTRICAS DE ACTIVIDAD ===
  messagesCount: number            // Total mensajes procesados
  sessionsToday: number            // Sesiones √∫nicas hoy
  lastActivity: number             // Timestamp √∫ltima actividad
  
  // === SALUD DEL SISTEMA ===
  systemHealth: 'optimal' | 'good' | 'warning' | 'critical'
  healthScore: number              // Score num√©rico salud (0-100)
  
  // === M√âTRICAS POR N√öCLEO ===
  coreMetrics: {
    dashboard: CoreMetrics
    assistant: CoreMetrics  
    inference: CoreMetrics
  }
  
  // === M√âTRICAS TEMPORALES ===
  uptime: number                   // Tiempo funcionando (ms)
  avgSessionDuration: number       // Duraci√≥n promedio sesi√≥n (ms)
  peakLoadTime: number             // Hora pico de carga
}

export interface CoreMetrics {
  messagesCount: number            // Mensajes en este core
  avgResponseTime: number          // Tiempo respuesta promedio
  isActive: boolean               // ¬øCore activo actualmente?
  lastActivity: number            // Timestamp √∫ltima actividad
  loadLevel: 'low' | 'medium' | 'high' | 'critical' // Nivel de carga
}

// === DIAGNOSTIC PROGRESS INTERFACE ===
export interface DiagnosticProgress {
  // === PROGRESO DIAGN√ìSTICO ===
  currentCycle: number             // Ciclo diagn√≥stico actual (calculado)
  totalCycles: number              // Total ciclos en sesi√≥n
  
  // === FASES M√âDICAS ===
  currentPhase: DiagnosticPhase    // Fase actual del diagn√≥stico
  phasesCompleted: DiagnosticPhase[] // Fases ya completadas
  nextPhase: DiagnosticPhase | null  // Siguiente fase esperada
  
  // === PROGRESO CUANTIFICADO ===
  completionPercentage: number     // % progreso (0-100)
  estimatedTimeRemaining: number   // Tiempo estimado restante (ms)
  
  // === ESTADO DEL PROGRESO ===
  isStalled: boolean              // ¬øProgreso estancado?
  lastPhaseChange: number         // Timestamp √∫ltimo cambio fase
  
  // === M√âTRICAS DE CALIDAD ===
  progressQuality: 'excellent' | 'good' | 'fair' | 'poor'
  confidenceTrend: 'increasing' | 'stable' | 'decreasing'
  
  // === INFORMACI√ìN CONTEXTUAL ===
  totalMessagesProcessed: number   // Mensajes procesados
  phaseDurations: Record<DiagnosticPhase, number> // Tiempo por fase
}

export type DiagnosticPhase = 
  | 'intake'           // Recolecci√≥n inicial s√≠ntomas
  | 'analysis'         // An√°lisis de informaci√≥n  
  | 'diagnosis'        // Formulaci√≥n diagn√≥stica
  | 'treatment'        // Plan de tratamiento
  | 'followup'         // Seguimiento

// === PATIENT REMINDER INTERFACE ===
export interface PatientReminder {
  // === IDENTIFICACI√ìN ===
  id: string                      // ID √∫nico del recordatorio
  relatedMessageId: string        // Mensaje que gener√≥ el recordatorio
  
  // === CONTENIDO DEL RECORDATORIO ===
  title: string                   // T√≠tulo del recordatorio
  content: string                 // Descripci√≥n completa
  type: ReminderType              // Tipo de recordatorio
  
  // === PRIORIDAD Y TIMING ===
  priority: ReminderPriority      // Prioridad del recordatorio
  dueDate: number | null          // Fecha l√≠mite (timestamp)
  reminderDate: number | null     // Cu√°ndo recordar (timestamp)
  
  // === ESTADO ===
  isCompleted: boolean            // ¬øRecordatorio completado?
  isOverdue: boolean              // ¬øRecordatorio vencido?
  completedAt: number | null      // Cu√°ndo se complet√≥
  
  // === METADATOS ===
  createdAt: number               // Cu√°ndo se cre√≥
  patientSessionId: string        // Sesi√≥n del paciente
  estimatedDuration: number       // Duraci√≥n estimada (minutos)
  
  // === CONTEXTO M√âDICO ===
  medicalContext: string          // Contexto m√©dico del recordatorio
  extractedFromPhase: DiagnosticPhase // De qu√© fase se extrajo
}

export type ReminderType = 
  | 'medication'      // Medicamentos
  | 'appointment'     // Citas m√©dicas
  | 'test'           // Estudios/an√°lisis
  | 'lifestyle'      // Cambios de estilo de vida
  | 'followup'       // Seguimiento general
  | 'monitoring'     // Monitoreo de s√≠ntomas

export type ReminderPriority = 
  | 'low'            // Baja prioridad
  | 'medium'         // Prioridad media  
  | 'high'           // Alta prioridad
  | 'urgent'         // Urgente

// === PHYSICIAN NOTE INTERFACE ===
export interface PhysicianNote {
  // === IDENTIFICACI√ìN ===
  id: string                      // ID √∫nico de la nota
  relatedMessageIds: string[]     // Mensajes que generaron la nota
  
  // === CONTENIDO DE LA NOTA ===
  title: string                   // T√≠tulo generado autom√°ticamente
  content: string                 // Contenido completo de la nota
  summary: string                 // Resumen ejecutivo
  
  // === CATEGORIZACI√ìN ===
  category: NoteCategory          // Categor√≠a m√©dica
  tags: string[]                  // Tags extra√≠dos del contenido
  specialtyRelevant: MedicalSpecialty[] // Especialidades relevantes
  
  // === CALIDAD Y CONFIANZA ===
  confidence: number              // Confianza del an√°lisis (0-1)
  qualityScore: number           // Score de calidad de la nota (0-1)
  isImportant: boolean           // ¬øNota marcada como importante?
  
  // === METADATOS TEMPORALES ===
  createdAt: number              // Cu√°ndo se cre√≥
  lastModified: number           // √öltima modificaci√≥n
  patientSessionId: string       // Sesi√≥n del paciente
  
  // === CONTEXTO CL√çNICO ===
  clinicalContext: string         // Contexto cl√≠nico
  extractionSource: 'conversation' | 'analysis' | 'inference' // Fuente
  
  // === NAVEGACI√ìN Y B√öSQUEDA ===
  searchableContent: string       // Contenido optimizado para b√∫squeda
  keyPhrases: string[]           // Frases clave extra√≠das
  
  // === ACCIONES RELACIONADAS ===
  linkedReminders: string[]       // IDs de recordatorios relacionados
  linkedAnalysis: string[]        // IDs de an√°lisis SOAP relacionados
}

export type NoteCategory = 
  | 'diagnosis'       // Notas diagn√≥sticas
  | 'treatment'       // Tratamiento y medicaci√≥n
  | 'observation'     // Observaciones cl√≠nicas
  | 'plan'           // Planes de cuidado
  | 'education'      // Educaci√≥n al paciente
  | 'followup'       // Seguimiento
  | 'differential'   // Diagn√≥stico diferencial

export type MedicalSpecialty = 
  | 'general_medicine'
  | 'cardiology'
  | 'dermatology'
  | 'neurology'
  | 'gastroenterology'
  | 'endocrinology'
  | 'psychiatry'
  | 'orthopedics'
  | 'emergency'

// === UTILITY CREATION FUNCTIONS ===
export const createEmptySOAPAnalysis = (): SOAPAnalysis => ({
  subjective: null,
  objective: null, 
  assessment: null,
  plan: null,
  confidence: 0,
  lastUpdated: Date.now(),
  sessionId: '',
  isComplete: false,
  completionPercentage: 0,
  totalMessages: 0,
  qualityScore: 0,
  extractionMethod: 'automatic'
})

export const createEmptySystemMetrics = (): SystemMetrics => ({
  confidence: 0,
  cycles: 0,
  agentsActive: 0,
  processingTime: 0,
  messagesCount: 0,
  sessionsToday: 0,
  lastActivity: Date.now(),
  systemHealth: 'warning',
  healthScore: 0,
  coreMetrics: {
    dashboard: createEmptyCoreMetrics(),
    assistant: createEmptyCoreMetrics(),
    inference: createEmptyCoreMetrics()
  },
  uptime: 0,
  avgSessionDuration: 0,
  peakLoadTime: Date.now()
})

export const createEmptyCoreMetrics = (): CoreMetrics => ({
  messagesCount: 0,
  avgResponseTime: 0,
  isActive: false,
  lastActivity: Date.now(),
  loadLevel: 'low'
})

export const createEmptyDiagnosticProgress = (): DiagnosticProgress => ({
  currentCycle: 0,
  totalCycles: 0,
  currentPhase: 'intake',
  phasesCompleted: [],
  nextPhase: 'analysis',
  completionPercentage: 0,
  estimatedTimeRemaining: 0,
  isStalled: false,
  lastPhaseChange: Date.now(),
  progressQuality: 'fair',
  confidenceTrend: 'stable',
  totalMessagesProcessed: 0,
  phaseDurations: {
    intake: 0,
    analysis: 0,
    diagnosis: 0,
    treatment: 0,
    followup: 0
  }
})

export const createEmptyReminders = (): PatientReminder[] => []

export const createEmptyNotes = (): PhysicianNote[] => []

// === LEGACY COMPATIBILITY INTERFACES ===
export interface LegacyMockCase {
  soap: SOAPAnalysis | null
  confidence: number
}

export interface LegacyMetrics {
  confidence: number
}

export interface LegacyIterativeState {
  currentCycle: number
}

// === TRANSFORMATION HELPERS ===
export const transformToLegacyFormat = (analysis: SOAPAnalysis | null): LegacyMockCase => ({
  soap: analysis,
  confidence: analysis?.confidence ? Math.round(analysis.confidence * 100) : 0
})

export const transformToLegacyMetrics = (metrics: SystemMetrics): LegacyMetrics => ({
  confidence: Math.round(metrics.confidence)
})

export const transformToLegacyIterative = (progress: DiagnosticProgress): LegacyIterativeState => ({
  currentCycle: progress.currentCycle
})